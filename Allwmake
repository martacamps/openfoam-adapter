#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

########## CONFIGURATION - You may want to change these ########################
# Note: system paths such as LD_LIBRARY_PATH, LIBRARY_PATH, or CPLUS_INCLUDE_PATH
# are currently NOT searched. Using these variables here also does not work.
# You need to specify the exact directories, without any list separators.

# YAML-CPP include path - the PARENT of yaml-cpp/ (try running "locate yaml.h")
ADAPTER_YAML_CPP_INC="/usr/include/yaml-cpp"
# YAML-CPP library path (try running "locate libyaml-cpp.")
ADAPTER_YAML_CPP_LIB="/usr/lib/x86_64-linux-gnu/"

# preCICE root path (should be already globally set)
ADAPTER_PRECICE_ROOT="${PRECICE_ROOT}"

## preCICE as a static library?
# If you use preCICE as a static library, then you also need to
# specify its dependncies.
# For an up-to-date list of dependencies,
# look at https://github.com/precice/precice/wiki/Building
# C++ Boost library path - required from preCICE (try running "locate libboost_log.")
ADAPTER_BOOST_LIB="/usr/local/lib"
# PETSc library path - if required from preCICE (try running "locate libpetsc.")
ADAPTER_PETSC_LIB="${PETSC_DIR}/${PETSC_ARCH}/lib"
# Uncomment to use preCICE as a static library: preCICE dependencies
# ADAPTER_PRECICE_DEP="-L${ADAPTER_PETSC_LIB} -lpetsc -lmpi_cxx -L${ADAPTER_BOOST_LIB} -lboost_system -lboost_filesystem -lboost_log -lboost_log_setup -lboost_thread -lboost_program_options -lpthread -lpython2.7"


# Optional: Preprocessor flags ("-DADAPTER_DEBUG_MODE" enables debug messages)
ADAPTER_PREP_FLAGS="-DADAPTER_DEBUG_MODE"

# Optional: Flags used by wmake.
# In order to compile with multiple threads, add e.g. "-j 4".
# Make sure that these options are supported by your OpenFOAM version.
ADAPTER_WMAKE_OPTIONS=""

# Where should the adapter be built? Default: "${FOAM_USER_LIBBIN}"
ADAPTER_TARGET_DIR="${FOAM_USER_LIBBIN}"
################################################################################

# Information header
echo "Building the OpenFOAM adapter for preCICE..."
echo "Make sure that all the required dependencies (mainly yaml-cpp and preCICE) are installed and their paths set in this file are correct. System paths such as LD_LIBRARY_PATH are NOT searched.\n"

# Export the environment variables
export ADAPTER_YAML_CPP_INC
export ADAPTER_YAML_CPP_LIB
export ADAPTER_PRECICE_ROOT
export ADAPTER_PRECICE_DEP
export ADAPTER_PREP_FLAGS
export ADAPTER_TARGET_DIR

# Inform the user about the environment
echo "Using the following environment variables:"
echo "  ADAPTER_YAML_CPP_INC  = ${ADAPTER_YAML_CPP_INC}"
echo "  ADAPTER_YAML_CPP_LIB  = ${ADAPTER_YAML_CPP_LIB}"
echo "  ADAPTER_PRECICE_ROOT  = ${ADAPTER_PRECICE_ROOT}"
if [ "${ADAPTER_PRECICE_DEP}" ]; then
    echo "      preCICE dependencies:"
    echo "      ADAPTER_PETSC_LIB     = ${ADAPTER_PETSC_LIB}"
    echo "      ADAPTER_BOOST_LIB     = ${ADAPTER_BOOST_LIB}"
    echo "      ADAPTER_PRECICE_DEP   = ${ADAPTER_PRECICE_DEP}"
else
    echo "      preCICE dependencies: not specified (ok if shared library)"
fi
echo "  ADAPTER_PREP_FLAGS    = ${ADAPTER_PREP_FLAGS}"
echo "  ADAPTER_TARGET_DIR    = ${ADAPTER_TARGET_DIR}"
echo "  ADAPTER_WMAKE_OPTIONS = ${ADAPTER_WMAKE_OPTIONS}"
echo ""

# Run wmake (build the adapter) and check the exit code
wmake ${ADAPTER_WMAKE_OPTIONS} libso
if [ $? -ne 0 ]; then
echo ""
echo "Building failed."
exit
fi
echo ""

ADAPTER_UNDEFINED_SYMBOLS=$(ldd -r ${ADAPTER_TARGET_DIR}/libpreciceAdapterFunctionObject.so | grep "undefined" -c)
if [ "${ADAPTER_UNDEFINED_SYMBOLS}" -gt 0 ]; then
    echo "Attention: there were ${ADAPTER_UNDEFINED_SYMBOLS} undefined symbols."
    echo "Run 'ldd -r ${ADAPTER_TARGET_DIR}/libpreciceAdapterFunctionObject.so' to see them."
else
    echo "Building completed successfully!"
    echo "Next step: Run an example from the tutorials/ directory."
fi
